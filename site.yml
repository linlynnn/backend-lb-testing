- name: Install and configure node_exporter
  hosts: localhost
  become: yes
  vars:
    node_exporter_version: "1.8.1"
    node_exporter_url: "https://github.com/prometheus/node_exporter/releases/download/v{{ node_exporter_version }}/node_exporter-{{ node_exporter_version }}.linux-amd64.tar.gz"
    node_exporter_tar: "/tmp/node_exporter-{{ node_exporter_version }}.linux-amd64.tar.gz"
    node_exporter_dir: "/opt/node_exporter"
    node_exporter_binary: "/usr/local/bin/node_exporter"

  tasks:

    - name: Download node_exporter tarball
      get_url:
        url: "{{ node_exporter_url }}"
        dest: "{{ node_exporter_tar }}"
        mode: '0644'

    - name: Extract node_exporter
      unarchive:
        src: "{{ node_exporter_tar }}"
        dest: "/tmp"
        remote_src: yes

    - name: Copy node_exporter binary
      copy:
        src: "/tmp/node_exporter-{{ node_exporter_version }}.linux-amd64/node_exporter"
        dest: "{{ node_exporter_binary }}"
        mode: '0755'

    - name: Create node_exporter systemd service
      copy:
        dest: /etc/systemd/system/node_exporter.service
        content: |
          [Unit]
          Description=Node Exporter
          Wants=network-online.target
          After=network-online.target

          [Service]
          User=nobody
          ExecStart={{ node_exporter_binary }}

          [Install]
          WantedBy=default.target
        mode: '0644'

    - name: Reload systemd to apply new service
      systemd:
        daemon_reload: yes

    - name: Enable and start node_exporter service
      systemd:
        name: node_exporter
        enabled: yes
        state: started

- name: Install Go on target machines
  hosts: localhost
  become: yes
  vars:
    go_version: "1.22.0"
    go_download_url: "https://go.dev/dl/go{{ go_version }}.linux-amd64.tar.gz"
    go_install_dir: "/usr/local"
    go_tarball: "/tmp/go{{ go_version }}.linux-amd64.tar.gz"
    project_dir: "/home/ubuntu/backend"

  tasks:

    - name: Download Go tarball
      get_url:
        url: "{{ go_download_url }}"
        dest: "{{ go_tarball }}"
        mode: '0644'

    - name: Remove any existing Go installation
      file:
        path: "{{ go_install_dir }}/go"
        state: absent

    - name: Extract Go tarball
      unarchive:
        src: "{{ go_tarball }}"
        dest: "{{ go_install_dir }}"
        remote_src: yes

    - name: Ensure Go binary is in PATH
      copy:
        dest: /etc/profile.d/go.sh
        content: |
          export PATH=$PATH:/usr/local/go/bin
        mode: '0755'

    - name: Install stress-ng on Debian/Ubuntu
      ansible.builtin.apt:
        name: stress-ng
        state: present
      when: ansible_facts['os_family'] == "Debian"

    - name: Ensure project directory is owned by ubuntu
      file:
        path: "{{ project_dir }}"
        owner: ubuntu
        group: ubuntu
        recurse: yes

    - name: Initialize Go module and download dependencies
      become: yes
      become_user: ubuntu
      shell: |
        cd {{ project_dir }}
        go mod tidy
      environment:
        PATH: "/usr/local/go/bin:{{ ansible_env.PATH }}"
        GOPATH: /home/ubuntu/go
        GOMODCACHE: /home/ubuntu/go/pkg/mod

    - name: Start backend Go application
      become: yes
      become_user: ubuntu
      command: /usr/local/go/bin/go run {{ project_dir }}/backend.go
      args:
        chdir: "{{ project_dir }}"
      environment:
        PATH: "/usr/local/go/bin:{{ ansible_env.PATH }}"
        GOPATH: /home/ubuntu/go
        GOMODCACHE: /home/ubuntu/go/pkg/mod





